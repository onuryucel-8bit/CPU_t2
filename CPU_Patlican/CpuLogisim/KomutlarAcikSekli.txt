Durdurma kontrol bitleri 2a00000

00(postaB)[postaA]
00(00_0)[000]

===Mikro kodlar calismiyorsa
!!Eger yakalama suresinde oynama yapilirsa 
	decoder sayacini AYARLA!!
	
!!ADRES_ROM 'a bak dogru adresi gosteriyormu? !!

!!BOS KISIMLARI SIFIR OLARAK BIRAK sayac adresi tam almiyor!!

FETCH-YAKALAMA
{
	/*
	24
	41
	2080
	41
	*/
	
	//24
	PC_enb,
	MAR_we
	
	PC => MAR
	PC++
	
	//41
	RAM_out,
	MDR_we
	
	RAM => MDR
	
	//2080
	MDR_out,
	IR_we
	
	MDR => IR
		
	//24
	PC_enb,	
	MDR_we
		
	PC => MAR
	PC++	
	
	//41
	MAR_we,
	RAM_out,
	
	RAM => MDR
	
}

//CALISIYOR 08.06.25
LOAD 0x01 
{
	/*
	200080	
	24
	41
	108080
	*/
	
	//rx => postaA

	//200080
	table[MDR_out],
	table[postaA_we],
	
	MDR => postaA
	
	
	//3. bayti goster
	//24
	PC_enb,	
	MDR_we
	
	PC => MAR
	PC++//sonraki komutu goster
	
	//41 3. bayti al
	ram_out
	mdr_we
	
	RAM => MDR
	
	//108080
	table[MDR_out],
	table[REGFILE_we],
	table[postaA_out],
	
	MDR => regfile
	
	
	
	

	
}

//CALISIYOR 08.06.25
LOAD 0x02
{
	/*
		200080
		24
		41
		2000080
		1000030
		41
		108080
	*/
	
	
	//200080
	table[MDR_out],
	table[postaA_we],
	MDR => postaA
	
	//3. bayti goster
	//24
	PC_enb,	
	MDR_we
	
	PC => MAR
	PC++//sonraki komutu goster
	
	//41 3. bayti al
	ram_out
	mdr_we
	
	RAM => MDR
	
	//2000080
	//adresi al
	table[MDR_out],
	table[adrReg_we],
	
	MDR => adresReg

	//1000030
	table[adrReg_out],
	table[MAR_we],
	table[MUX_enb]
	
	adresReg => MAR
	
	//41 adresteki veriyi mdr ye koy
	ram_out
	mdr_we
	
	//108080
	table[MDR_out],
	table[REGFILE_we],
	table[postaA_out],
	MDR => regfile
}

//CALISIYOR 08.06.25
STR 0x03
{
	/*
	200080
	24
	41
	1000030
	110002
	*/
	//200080
	table[MDR_out],
	table[postaA_we],
	MDR => postaA
	
	
	
	//3. bayti goster
	//24
	PC_enb,	
	MDR_we
	
	PC => MAR
	PC++//sonraki komutu goster
	
	
	
	//41 3. bayti al
	ram_out
	mdr_we
	
	RAM => MDR
	
	//2000080
	//adresi al
	table[MDR_out],
	table[adrReg_we],
	
	//1000030
	table[adrReg_out],
	table[MAR_we],
	
	adresReg => MAR
			
	//110002	
	table[REGFILE_out],
	table[postaA_out],
	table[RAM_we],
 
	RegFile[postaA] => RAM
}

//CALISIYOR 08.06.25
MOV 0x04
{   
	/*
	a00080
	111000
	488000
	*/

	//a00080
	table[MDR_out],
	table[postaA_we],
	table[postaB_we],	
	rx => postaB
	ry => postaA
	
	//111000
	table[postaA_out],
	table[REGFILE_out],
	table[TEMP_we],
	rx => TEMP
	
	//488000
	table[TEMP_out],
	table[REGFILE_we],
	table[postaB_out],
	TEMP => regfile
	
	
}

//CALISIYOR 09.06.25
OUT 0x05
{
	/*
	200080
	150000
	*/
	//200080
	table[MDR_out],
	table[postaA_we],

	rx => postaA
	
	//150000
	table[postaA_out],
	table[REGFILE_out],
	table[OUT_we]
	
	rx => outReg	
}

//
OUT 0x06
{
	/*
	2000080
	1000030
	41
	40081
	*/
	//2000080
	//adresi al
	table[MDR_out],
	table[adrReg_we],
	
	adres => adresReg
	
	//1000030
	table[adrReg_out],
	table[MAR_we],
	
	adresReg => MAR
	
	//41	
    table[RAM_out],
    table[MDR_we],
	
	RAM => MDR
	
	//40081
	table[MDR_out],
	table[RAM_out],
	table[OUT_we]
	
	MDR => outReg
}

//CALISIYOR  09.06.2025
OR
XOR
AND
SUB 
ADD 0x08
{
	/*
	a00080
	411000
	110700
	408800
	*/
	
	//a00080
	table[MDR_out],
	table[postaA_we],
	table[postaB_we],	
	rx => postaB
	ry => postaA
	
	//411000
	table[postaB_out],
	table[REGFILE_out],
	table[TEMP_we],
	//rx => tempReg
	
	
	//110700
	//ry => aluAraHat	
	//rx + ry => ACC
	table[postaA_out],
	table[REGFILE_out],
	table[I3B],
	table[ALUMUX_enb],
	table[ACC_we]
	
	//408800
	table[ALU_out],
	table[REGFILE_we],
	table[postaB_out],
	//ACC => regfile
}

//CALISIYOR 09.06.2025
NOT 0x0e
{
	
	/*
	200080
	100700
	108800
	*/
	//200080
	table[MDR_out],
	table[postaA_we],
	MDR => postaA
	
	rx => postaA
	
	//100700	
	table[postaA_out],
	table[I3B],
	table[ACC_we],
	table[ALUMUX_enb]
	
	rx => ALU => ACC
	
	//108800	
	table[postaA_out],
	table[REGFILE_we],
	table[ALU_out]
	
	ACC => regfile	
}

//CALISIYOR 09.06.2025
SHL 0x0a
SHR 0x0b
{
	//postaB = reg
	//postaA = sayi
	
	/*
	a00080
	411000
	400700
	408800
	*/
	
	//a00080
	table[MDR_out],
	table[postaA_we],
	table[postaB_we],	
	rx => postaB
	ry => postaA
	
	//411000
	table[REGFILE_out],
	table[postaB_out],
	table[TEMP_we]
		
	rx => tempReg
	
	//400700
	table[postaB_out],    
	table[ALUMUX_enb],
	table[I3B],
	table[ACC_we]
	
	TEMP => ALU => ACC
	
	
	//408800	
	table[postaA_out],
	table[REGFILE_we],
	table[ALU_out]
	
	ACC => regfile	
	
}

SUB
AND
OR
XOR
ADD 0x10 ADD rx,0x
{
	
	/*
	200080
	101000
	24
	41
	4780
	108800
	*/
	
	//200080
	table[MDR_out],
	table[postaA_we],
	
	MDR => postaA	
	//mdr(rx) => postaA
	
	
	//101000
	postaA_out,	
	TEMP_we
	
	regfile => tempReg
	
	//SAYI => MDR
	{
	//3. bayti goster
	//24
	PC_enb,	
	MDR_we
	
	PC => MAR
	PC++//sonraki komutu goster
	
	//41 3. bayti al
	ram_out
	mdr_we
	}
	
	//4780
	REGPATH_in,
	I3B,
	ALUMUX_enb,
	ACC_we
	
	rx + sayi => ACC
	
	//108800
	ALU_out,
	REGFILE_we,
	postaA_out,
 
	ACC => rx
	
	
}

0x18
ADC
{
	//200080
	//111000
	//20700
	//108800
	
	//200080
	table[MDR_out],
	table[postaA_we],
	
	MDR => postaA	
	
	//101000
	postaA_out,
	TEMP_we
		
	rx => TEMP
	
	
	//24700
	CARRY_in,
	I3B,
	ALUMUX_enb,
	ACC_we,
	REGPATH_in
			
	elde + rx => ACC
		
	//108800
	ALU_out,
	REGFILE_we,
	postaA_out,
 
	ACC => rx
	
}

//CALISIYOR 09.06.2025
JMP 0x20
{
	/*
	2000080
	1000008
	*/
	//2000080
	//adresi al
	table[MDR_out],
	table[adrReg_we],	
	
	adres => adresReg
	
	//1000008
	table[adrReg_out],
	table[PC_load],
	
	adresReg => PC	
}

//Flags / Bayraklar
/*
	0 : ACC < 0
	1 : ACC == 0
	2 : ACC > 0
	3 : subcarry
	4 : sumcarry	

*/

JZ 0x21
{
	if(ACC == 0)
	{
		//2000080
		//adresi al
		table[MDR_out],
		table[adrReg_we],	
	
		adres => adresReg
		
		//1000008
		table[adrReg_out],
		table[PC_load],
	
		adresReg => PC	
	}
}

JLZ
{
	if(ACC < 0)
	{
		//adres => adresReg
		//adresReg => PC
	}
}

JGZ
{
	if(ACC > 0)
	{
		//adres => adresReg
		//adresReg => PC
	}
}

JSC
{
	if(sumCarry == 1)
	{
		//adres => adresReg
		//adresReg => PC
	}
}

JUC
{
	if(subCarry == 1)
	{
		//adres => adresReg
		//adresReg => PC
	}
}


OUT @rx
{
	//op - rx 2byte
	
	//200080	mdr => postaA
	//2110000	rx => adresReg
	//1000020   adresReg => MAR
	//41		ram => MDR	
	//40080		MDR => OUT
	
	//200080
	MDR_out,
	postaA_we,
	
	MDR => postaA
	
	//2110000
	postaA_out,
	REGFILE_out,
	adrReg_we
	
	rx => adresReg
	
	//1000020
	adrReg_out,
	MUX_enb,
	MAR_we
	
	adresReg => MAR
	
	//41
	RAM_out,
	MDR_we
	
	RAM => MDR
	
	//40080
	MDR_out,
	OUT_we
	
	MDR => OUT_reg

}